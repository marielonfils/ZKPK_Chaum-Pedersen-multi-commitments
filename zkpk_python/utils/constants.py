import numpy as np
from gmpy2 import mpz

###Group parameters and Generators loading###

#Group parameters and some generators
p = mpz
q = mpz(115792089237316195423570985008687907853269984665640564039457584007913129639747)  # pow(2, 256) - 189
r = mpz(9019518416950528558373478086511232658951474842525520401496114928154304263969655687927867442562559311457926593510757267649063628681241064260953609180947464800958467390949485096429653122916928704841547265126247408167856620024815508684472819746384115369148322548696439327979752948311712506113890045287907335656308945630141969472484100558565879585476547782717283106837945923693806973017510492730838409381014701258202694245760602718602550739205297257940969992371799325870179746191672464736721424617639973324090288952006260483222894269928179970153634220390287255837625331668555933039199194619824375869291271098935000699785346405055160394688637074599519052655517388596327473273906029869030988064607361165803129718773877185415445291671089029845994683414682274353665003204293107284473196033588697845087556526514092678744031772226855409523354476737660407619436531080189837076164818131039104397776628128325247709678431023369197272126578394856752060591013812807437681624251867074769638052097737959472027002770963255207757153746376691827309573603635608169799503216990026029763868313819255248026666854405409059422844776556067163611304891154793770115766608153679099327786) # (p - 1) / q
g = mpz(119359756198641231858139651428439585561105914902686985078252796680474637856752833978884422594516170665312423393830118608408063594508087813277769835084746883589963798527237870817233369094387978405585759195339509768803496494994109693743279157584139079471178850751266233150727771094796709619646350222242437970473900636242584673413224137139139346254912172628651028694427789523683070264102332413084663100402635889283790741342401259356660761075766365672754329863241692760862540151023800163269173550320623249398630247531924855997863109776955214403044727497968354022277828136634059011708099779241302941071701051050378539485717425482151777277387633806111112178267035315726401285294598397677116389893642725498831127977915200359151833767358091365292230363248410124916825814514852703770457024102738694375502049388804979035628232209959549199366986471874840784466132903083308458356458177839111623113116525230200791649979270165318729763550486200224695556789081331596212761936863634467236301450039399776963661755684863012396788149479256016157814129329192490798309248914535389650594573156725696657302152874510063002532052622638033113978672254680147128450265983503193865576932419282003012093526302631221491418211528781074474515924597472841036553107847)  # 2^r mod p
h = mpz
u = mpz

#Loading of the required number of generators
def generate_constants(l,m=None,n=None):
    """
    inputs
        - l : int
        - m : optional int, used in Logarithmic 0-1 and K-selection proofs
        - n : optional int, used in K-selection proof
    outputs
        - gs : array of mpz of size l containing generators (for Logarithmic 0-1, K-selection and Partial Opening)
        - hs : optional array of mpz of size l containing generators (for Logarithmic 0-1 and K-selection)
        - g_bolds : optional array of mpz of size lxm (Logarithmic 0-1) or nxm (K-selection) containing generators 
        - h_bolds : optional array of mpz of size lxm (Logarithmic 0-1) or nxm (K-selection) containing generators
    """	

    npzfile = np.load('./utils/constants.npz',allow_pickle=True)
    gs=npzfile['arr_1']
    if m is None and n is None:
        if l<=128:
            to_return = gs[:l]
            del gs
            return np.array(to_return,dtype=object)
        hs=npzfile['arr_0']    
        g_bolds=npzfile['arr_2']
        h_bolds=npzfile['arr_3']
        generators = np.concatenate((gs,hs),dtype=object)
        generators = np.concatenate((generators,g_bolds),dtype=object)
        generators = np.concatenate((generators,h_bolds),dtype=object)
        del gs
        del hs
        del g_bolds
        del h_bolds
        return np.array(generators[:l],dtype=object)

    if m is not None:
        s_2=l*m
        s=(l,m)
    if n is not None:
        s_2=n*m
        s=(n,m)
    
    
    hs=npzfile['arr_0']    
    g_bolds=npzfile['arr_2']
    h_bolds=npzfile['arr_3']
    hs_bis= np.array(hs[:l],dtype=object)
    gs_bis= np.array(gs[:l],dtype=object)
    g_bolds_bis = np.array(g_bolds[:s_2],dtype=object).reshape(s)
    h_bolds_bis = np.array(h_bolds[:s_2],dtype=object).reshape(s)
    del g_bolds
    del h_bolds
    del gs
    del hs
    return gs_bis,hs_bis,g_bolds_bis,h_bolds_bis



